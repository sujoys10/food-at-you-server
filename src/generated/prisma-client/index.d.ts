// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  item: (where?: ItemWhereInput) => Promise<boolean>;
  order: (where?: OrderWhereInput) => Promise<boolean>;
  orderBag: (where?: OrderBagWhereInput) => Promise<boolean>;
  orderedItem: (where?: OrderedItemWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  vendor: (where?: VendorWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  item: (where: ItemWhereUniqueInput) => ItemNullablePromise;
  items: (args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Item>;
  itemsConnection: (args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ItemConnectionPromise;
  order: (where: OrderWhereUniqueInput) => OrderNullablePromise;
  orders: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Order>;
  ordersConnection: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrderConnectionPromise;
  orderBag: (where: OrderBagWhereUniqueInput) => OrderBagNullablePromise;
  orderBags: (args?: {
    where?: OrderBagWhereInput;
    orderBy?: OrderBagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<OrderBag>;
  orderBagsConnection: (args?: {
    where?: OrderBagWhereInput;
    orderBy?: OrderBagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrderBagConnectionPromise;
  orderedItem: (
    where: OrderedItemWhereUniqueInput
  ) => OrderedItemNullablePromise;
  orderedItems: (args?: {
    where?: OrderedItemWhereInput;
    orderBy?: OrderedItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<OrderedItem>;
  orderedItemsConnection: (args?: {
    where?: OrderedItemWhereInput;
    orderBy?: OrderedItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrderedItemConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  vendor: (where: VendorWhereUniqueInput) => VendorNullablePromise;
  vendors: (args?: {
    where?: VendorWhereInput;
    orderBy?: VendorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Vendor>;
  vendorsConnection: (args?: {
    where?: VendorWhereInput;
    orderBy?: VendorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VendorConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createItem: (data: ItemCreateInput) => ItemPromise;
  updateItem: (args: {
    data: ItemUpdateInput;
    where: ItemWhereUniqueInput;
  }) => ItemPromise;
  updateManyItems: (args: {
    data: ItemUpdateManyMutationInput;
    where?: ItemWhereInput;
  }) => BatchPayloadPromise;
  upsertItem: (args: {
    where: ItemWhereUniqueInput;
    create: ItemCreateInput;
    update: ItemUpdateInput;
  }) => ItemPromise;
  deleteItem: (where: ItemWhereUniqueInput) => ItemPromise;
  deleteManyItems: (where?: ItemWhereInput) => BatchPayloadPromise;
  createOrder: (data: OrderCreateInput) => OrderPromise;
  updateOrder: (args: {
    data: OrderUpdateInput;
    where: OrderWhereUniqueInput;
  }) => OrderPromise;
  updateManyOrders: (args: {
    data: OrderUpdateManyMutationInput;
    where?: OrderWhereInput;
  }) => BatchPayloadPromise;
  upsertOrder: (args: {
    where: OrderWhereUniqueInput;
    create: OrderCreateInput;
    update: OrderUpdateInput;
  }) => OrderPromise;
  deleteOrder: (where: OrderWhereUniqueInput) => OrderPromise;
  deleteManyOrders: (where?: OrderWhereInput) => BatchPayloadPromise;
  createOrderBag: (data: OrderBagCreateInput) => OrderBagPromise;
  updateOrderBag: (args: {
    data: OrderBagUpdateInput;
    where: OrderBagWhereUniqueInput;
  }) => OrderBagPromise;
  updateManyOrderBags: (args: {
    data: OrderBagUpdateManyMutationInput;
    where?: OrderBagWhereInput;
  }) => BatchPayloadPromise;
  upsertOrderBag: (args: {
    where: OrderBagWhereUniqueInput;
    create: OrderBagCreateInput;
    update: OrderBagUpdateInput;
  }) => OrderBagPromise;
  deleteOrderBag: (where: OrderBagWhereUniqueInput) => OrderBagPromise;
  deleteManyOrderBags: (where?: OrderBagWhereInput) => BatchPayloadPromise;
  createOrderedItem: (data: OrderedItemCreateInput) => OrderedItemPromise;
  updateOrderedItem: (args: {
    data: OrderedItemUpdateInput;
    where: OrderedItemWhereUniqueInput;
  }) => OrderedItemPromise;
  updateManyOrderedItems: (args: {
    data: OrderedItemUpdateManyMutationInput;
    where?: OrderedItemWhereInput;
  }) => BatchPayloadPromise;
  upsertOrderedItem: (args: {
    where: OrderedItemWhereUniqueInput;
    create: OrderedItemCreateInput;
    update: OrderedItemUpdateInput;
  }) => OrderedItemPromise;
  deleteOrderedItem: (where: OrderedItemWhereUniqueInput) => OrderedItemPromise;
  deleteManyOrderedItems: (
    where?: OrderedItemWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVendor: (data: VendorCreateInput) => VendorPromise;
  updateVendor: (args: {
    data: VendorUpdateInput;
    where: VendorWhereUniqueInput;
  }) => VendorPromise;
  updateManyVendors: (args: {
    data: VendorUpdateManyMutationInput;
    where?: VendorWhereInput;
  }) => BatchPayloadPromise;
  upsertVendor: (args: {
    where: VendorWhereUniqueInput;
    create: VendorCreateInput;
    update: VendorUpdateInput;
  }) => VendorPromise;
  deleteVendor: (where: VendorWhereUniqueInput) => VendorPromise;
  deleteManyVendors: (where?: VendorWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  item: (
    where?: ItemSubscriptionWhereInput
  ) => ItemSubscriptionPayloadSubscription;
  order: (
    where?: OrderSubscriptionWhereInput
  ) => OrderSubscriptionPayloadSubscription;
  orderBag: (
    where?: OrderBagSubscriptionWhereInput
  ) => OrderBagSubscriptionPayloadSubscription;
  orderedItem: (
    where?: OrderedItemSubscriptionWhereInput
  ) => OrderedItemSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  vendor: (
    where?: VendorSubscriptionWhereInput
  ) => VendorSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ItemType = "BREAKFAST" | "LUNCH" | "SNACKS" | "DINNER";

export type OrderStatus =
  | "PLACED"
  | "ACCEPTED"
  | "CANCELLED"
  | "PROCESSING"
  | "DELIVERED"
  | "RECEIVED";

export type ItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "category_ASC"
  | "category_DESC"
  | "type_ASC"
  | "type_DESC"
  | "url_ASC"
  | "url_DESC"
  | "description_ASC"
  | "description_DESC"
  | "price_ASC"
  | "price_DESC"
  | "is_available_ASC"
  | "is_available_DESC"
  | "rating_ASC"
  | "rating_DESC";

export type OrderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "total_ASC"
  | "total_DESC"
  | "order_date_ASC"
  | "order_date_DESC"
  | "delivery_address_ASC"
  | "delivery_address_DESC"
  | "shipper_ASC"
  | "shipper_DESC"
  | "payment_details_ASC"
  | "payment_details_DESC"
  | "status_ASC"
  | "status_DESC";

export type OrderBagOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "status_ASC"
  | "status_DESC"
  | "delivery_date_ASC"
  | "delivery_date_DESC";

export type OrderedItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "quantity_ASC"
  | "quantity_DESC"
  | "delivery_date_ASC"
  | "delivery_date_DESC"
  | "status_ASC"
  | "status_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "address_ASC"
  | "address_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "created_at_ASC"
  | "created_at_DESC";

export type VendorOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "address_ASC"
  | "address_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "created_at_ASC"
  | "created_at_DESC"
  | "payment_details_ASC"
  | "payment_details_DESC"
  | "rating_ASC"
  | "rating_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  category?: Maybe<String>;
  category_not?: Maybe<String>;
  category_in?: Maybe<String[] | String>;
  category_not_in?: Maybe<String[] | String>;
  category_lt?: Maybe<String>;
  category_lte?: Maybe<String>;
  category_gt?: Maybe<String>;
  category_gte?: Maybe<String>;
  category_contains?: Maybe<String>;
  category_not_contains?: Maybe<String>;
  category_starts_with?: Maybe<String>;
  category_not_starts_with?: Maybe<String>;
  category_ends_with?: Maybe<String>;
  category_not_ends_with?: Maybe<String>;
  type?: Maybe<ItemType>;
  type_not?: Maybe<ItemType>;
  type_in?: Maybe<ItemType[] | ItemType>;
  type_not_in?: Maybe<ItemType[] | ItemType>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  is_available?: Maybe<Boolean>;
  is_available_not?: Maybe<Boolean>;
  rating?: Maybe<Int>;
  rating_not?: Maybe<Int>;
  rating_in?: Maybe<Int[] | Int>;
  rating_not_in?: Maybe<Int[] | Int>;
  rating_lt?: Maybe<Int>;
  rating_lte?: Maybe<Int>;
  rating_gt?: Maybe<Int>;
  rating_gte?: Maybe<Int>;
  vendor?: Maybe<VendorWhereInput>;
  AND?: Maybe<ItemWhereInput[] | ItemWhereInput>;
  OR?: Maybe<ItemWhereInput[] | ItemWhereInput>;
  NOT?: Maybe<ItemWhereInput[] | ItemWhereInput>;
}

export interface VendorWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  phone?: Maybe<Int>;
  phone_not?: Maybe<Int>;
  phone_in?: Maybe<Int[] | Int>;
  phone_not_in?: Maybe<Int[] | Int>;
  phone_lt?: Maybe<Int>;
  phone_lte?: Maybe<Int>;
  phone_gt?: Maybe<Int>;
  phone_gte?: Maybe<Int>;
  created_at?: Maybe<DateTimeInput>;
  created_at_not?: Maybe<DateTimeInput>;
  created_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_at_lt?: Maybe<DateTimeInput>;
  created_at_lte?: Maybe<DateTimeInput>;
  created_at_gt?: Maybe<DateTimeInput>;
  created_at_gte?: Maybe<DateTimeInput>;
  payment_details?: Maybe<String>;
  payment_details_not?: Maybe<String>;
  payment_details_in?: Maybe<String[] | String>;
  payment_details_not_in?: Maybe<String[] | String>;
  payment_details_lt?: Maybe<String>;
  payment_details_lte?: Maybe<String>;
  payment_details_gt?: Maybe<String>;
  payment_details_gte?: Maybe<String>;
  payment_details_contains?: Maybe<String>;
  payment_details_not_contains?: Maybe<String>;
  payment_details_starts_with?: Maybe<String>;
  payment_details_not_starts_with?: Maybe<String>;
  payment_details_ends_with?: Maybe<String>;
  payment_details_not_ends_with?: Maybe<String>;
  rating?: Maybe<Int>;
  rating_not?: Maybe<Int>;
  rating_in?: Maybe<Int[] | Int>;
  rating_not_in?: Maybe<Int[] | Int>;
  rating_lt?: Maybe<Int>;
  rating_lte?: Maybe<Int>;
  rating_gt?: Maybe<Int>;
  rating_gte?: Maybe<Int>;
  items_every?: Maybe<ItemWhereInput>;
  items_some?: Maybe<ItemWhereInput>;
  items_none?: Maybe<ItemWhereInput>;
  orders_every?: Maybe<OrderWhereInput>;
  orders_some?: Maybe<OrderWhereInput>;
  orders_none?: Maybe<OrderWhereInput>;
  AND?: Maybe<VendorWhereInput[] | VendorWhereInput>;
  OR?: Maybe<VendorWhereInput[] | VendorWhereInput>;
  NOT?: Maybe<VendorWhereInput[] | VendorWhereInput>;
}

export interface OrderWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  order_bags_every?: Maybe<OrderBagWhereInput>;
  order_bags_some?: Maybe<OrderBagWhereInput>;
  order_bags_none?: Maybe<OrderBagWhereInput>;
  total?: Maybe<Int>;
  total_not?: Maybe<Int>;
  total_in?: Maybe<Int[] | Int>;
  total_not_in?: Maybe<Int[] | Int>;
  total_lt?: Maybe<Int>;
  total_lte?: Maybe<Int>;
  total_gt?: Maybe<Int>;
  total_gte?: Maybe<Int>;
  customer?: Maybe<UserWhereInput>;
  vendor?: Maybe<VendorWhereInput>;
  order_date?: Maybe<DateTimeInput>;
  order_date_not?: Maybe<DateTimeInput>;
  order_date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  order_date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  order_date_lt?: Maybe<DateTimeInput>;
  order_date_lte?: Maybe<DateTimeInput>;
  order_date_gt?: Maybe<DateTimeInput>;
  order_date_gte?: Maybe<DateTimeInput>;
  delivery_address?: Maybe<String>;
  delivery_address_not?: Maybe<String>;
  delivery_address_in?: Maybe<String[] | String>;
  delivery_address_not_in?: Maybe<String[] | String>;
  delivery_address_lt?: Maybe<String>;
  delivery_address_lte?: Maybe<String>;
  delivery_address_gt?: Maybe<String>;
  delivery_address_gte?: Maybe<String>;
  delivery_address_contains?: Maybe<String>;
  delivery_address_not_contains?: Maybe<String>;
  delivery_address_starts_with?: Maybe<String>;
  delivery_address_not_starts_with?: Maybe<String>;
  delivery_address_ends_with?: Maybe<String>;
  delivery_address_not_ends_with?: Maybe<String>;
  shipper?: Maybe<String>;
  shipper_not?: Maybe<String>;
  shipper_in?: Maybe<String[] | String>;
  shipper_not_in?: Maybe<String[] | String>;
  shipper_lt?: Maybe<String>;
  shipper_lte?: Maybe<String>;
  shipper_gt?: Maybe<String>;
  shipper_gte?: Maybe<String>;
  shipper_contains?: Maybe<String>;
  shipper_not_contains?: Maybe<String>;
  shipper_starts_with?: Maybe<String>;
  shipper_not_starts_with?: Maybe<String>;
  shipper_ends_with?: Maybe<String>;
  shipper_not_ends_with?: Maybe<String>;
  payment_details?: Maybe<String>;
  payment_details_not?: Maybe<String>;
  payment_details_in?: Maybe<String[] | String>;
  payment_details_not_in?: Maybe<String[] | String>;
  payment_details_lt?: Maybe<String>;
  payment_details_lte?: Maybe<String>;
  payment_details_gt?: Maybe<String>;
  payment_details_gte?: Maybe<String>;
  payment_details_contains?: Maybe<String>;
  payment_details_not_contains?: Maybe<String>;
  payment_details_starts_with?: Maybe<String>;
  payment_details_not_starts_with?: Maybe<String>;
  payment_details_ends_with?: Maybe<String>;
  payment_details_not_ends_with?: Maybe<String>;
  status?: Maybe<OrderStatus>;
  status_not?: Maybe<OrderStatus>;
  status_in?: Maybe<OrderStatus[] | OrderStatus>;
  status_not_in?: Maybe<OrderStatus[] | OrderStatus>;
  AND?: Maybe<OrderWhereInput[] | OrderWhereInput>;
  OR?: Maybe<OrderWhereInput[] | OrderWhereInput>;
  NOT?: Maybe<OrderWhereInput[] | OrderWhereInput>;
}

export interface OrderBagWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<ItemType>;
  type_not?: Maybe<ItemType>;
  type_in?: Maybe<ItemType[] | ItemType>;
  type_not_in?: Maybe<ItemType[] | ItemType>;
  order?: Maybe<OrderWhereInput>;
  status?: Maybe<OrderStatus>;
  status_not?: Maybe<OrderStatus>;
  status_in?: Maybe<OrderStatus[] | OrderStatus>;
  status_not_in?: Maybe<OrderStatus[] | OrderStatus>;
  items_every?: Maybe<OrderedItemWhereInput>;
  items_some?: Maybe<OrderedItemWhereInput>;
  items_none?: Maybe<OrderedItemWhereInput>;
  delivery_date?: Maybe<DateTimeInput>;
  delivery_date_not?: Maybe<DateTimeInput>;
  delivery_date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  delivery_date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  delivery_date_lt?: Maybe<DateTimeInput>;
  delivery_date_lte?: Maybe<DateTimeInput>;
  delivery_date_gt?: Maybe<DateTimeInput>;
  delivery_date_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<OrderBagWhereInput[] | OrderBagWhereInput>;
  OR?: Maybe<OrderBagWhereInput[] | OrderBagWhereInput>;
  NOT?: Maybe<OrderBagWhereInput[] | OrderBagWhereInput>;
}

export interface OrderedItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  item?: Maybe<ItemWhereInput>;
  type?: Maybe<ItemType>;
  type_not?: Maybe<ItemType>;
  type_in?: Maybe<ItemType[] | ItemType>;
  type_not_in?: Maybe<ItemType[] | ItemType>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  order_bag?: Maybe<OrderBagWhereInput>;
  delivery_date?: Maybe<DateTimeInput>;
  delivery_date_not?: Maybe<DateTimeInput>;
  delivery_date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  delivery_date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  delivery_date_lt?: Maybe<DateTimeInput>;
  delivery_date_lte?: Maybe<DateTimeInput>;
  delivery_date_gt?: Maybe<DateTimeInput>;
  delivery_date_gte?: Maybe<DateTimeInput>;
  status?: Maybe<OrderStatus>;
  status_not?: Maybe<OrderStatus>;
  status_in?: Maybe<OrderStatus[] | OrderStatus>;
  status_not_in?: Maybe<OrderStatus[] | OrderStatus>;
  AND?: Maybe<OrderedItemWhereInput[] | OrderedItemWhereInput>;
  OR?: Maybe<OrderedItemWhereInput[] | OrderedItemWhereInput>;
  NOT?: Maybe<OrderedItemWhereInput[] | OrderedItemWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  phone?: Maybe<Int>;
  phone_not?: Maybe<Int>;
  phone_in?: Maybe<Int[] | Int>;
  phone_not_in?: Maybe<Int[] | Int>;
  phone_lt?: Maybe<Int>;
  phone_lte?: Maybe<Int>;
  phone_gt?: Maybe<Int>;
  phone_gte?: Maybe<Int>;
  created_at?: Maybe<DateTimeInput>;
  created_at_not?: Maybe<DateTimeInput>;
  created_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_at_lt?: Maybe<DateTimeInput>;
  created_at_lte?: Maybe<DateTimeInput>;
  created_at_gt?: Maybe<DateTimeInput>;
  created_at_gte?: Maybe<DateTimeInput>;
  orders_every?: Maybe<OrderWhereInput>;
  orders_some?: Maybe<OrderWhereInput>;
  orders_none?: Maybe<OrderWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type OrderWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type OrderBagWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type OrderedItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<Int>;
}>;

export type VendorWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<Int>;
}>;

export interface ItemCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  category: String;
  type: ItemType;
  url?: Maybe<String>;
  description: String;
  price: Int;
  is_available: Boolean;
  rating?: Maybe<Int>;
  vendor: VendorCreateOneWithoutItemsInput;
}

export interface VendorCreateOneWithoutItemsInput {
  create?: Maybe<VendorCreateWithoutItemsInput>;
  connect?: Maybe<VendorWhereUniqueInput>;
}

export interface VendorCreateWithoutItemsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  address?: Maybe<String>;
  phone?: Maybe<Int>;
  payment_details?: Maybe<String>;
  rating?: Maybe<Int>;
  orders?: Maybe<OrderCreateManyWithoutVendorInput>;
}

export interface OrderCreateManyWithoutVendorInput {
  create?: Maybe<
    OrderCreateWithoutVendorInput[] | OrderCreateWithoutVendorInput
  >;
  connect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
}

export interface OrderCreateWithoutVendorInput {
  id?: Maybe<ID_Input>;
  order_bags?: Maybe<OrderBagCreateManyWithoutOrderInput>;
  total: Int;
  customer: UserCreateOneWithoutOrdersInput;
  order_date: DateTimeInput;
  delivery_address: String;
  shipper?: Maybe<String>;
  payment_details?: Maybe<String>;
  status?: Maybe<OrderStatus>;
}

export interface OrderBagCreateManyWithoutOrderInput {
  create?: Maybe<
    OrderBagCreateWithoutOrderInput[] | OrderBagCreateWithoutOrderInput
  >;
  connect?: Maybe<OrderBagWhereUniqueInput[] | OrderBagWhereUniqueInput>;
}

export interface OrderBagCreateWithoutOrderInput {
  id?: Maybe<ID_Input>;
  type: ItemType;
  status?: Maybe<OrderStatus>;
  items?: Maybe<OrderedItemCreateManyWithoutOrder_bagInput>;
  delivery_date: DateTimeInput;
}

export interface OrderedItemCreateManyWithoutOrder_bagInput {
  create?: Maybe<
    | OrderedItemCreateWithoutOrder_bagInput[]
    | OrderedItemCreateWithoutOrder_bagInput
  >;
  connect?: Maybe<OrderedItemWhereUniqueInput[] | OrderedItemWhereUniqueInput>;
}

export interface OrderedItemCreateWithoutOrder_bagInput {
  id?: Maybe<ID_Input>;
  item: ItemCreateOneInput;
  type: ItemType;
  quantity: Int;
  delivery_date?: Maybe<DateTimeInput>;
  status?: Maybe<OrderStatus>;
}

export interface ItemCreateOneInput {
  create?: Maybe<ItemCreateInput>;
  connect?: Maybe<ItemWhereUniqueInput>;
}

export interface UserCreateOneWithoutOrdersInput {
  create?: Maybe<UserCreateWithoutOrdersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutOrdersInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  address?: Maybe<String>;
  phone?: Maybe<Int>;
}

export interface ItemUpdateInput {
  name?: Maybe<String>;
  category?: Maybe<String>;
  type?: Maybe<ItemType>;
  url?: Maybe<String>;
  description?: Maybe<String>;
  price?: Maybe<Int>;
  is_available?: Maybe<Boolean>;
  rating?: Maybe<Int>;
  vendor?: Maybe<VendorUpdateOneRequiredWithoutItemsInput>;
}

export interface VendorUpdateOneRequiredWithoutItemsInput {
  create?: Maybe<VendorCreateWithoutItemsInput>;
  update?: Maybe<VendorUpdateWithoutItemsDataInput>;
  upsert?: Maybe<VendorUpsertWithoutItemsInput>;
  connect?: Maybe<VendorWhereUniqueInput>;
}

export interface VendorUpdateWithoutItemsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  address?: Maybe<String>;
  phone?: Maybe<Int>;
  payment_details?: Maybe<String>;
  rating?: Maybe<Int>;
  orders?: Maybe<OrderUpdateManyWithoutVendorInput>;
}

export interface OrderUpdateManyWithoutVendorInput {
  create?: Maybe<
    OrderCreateWithoutVendorInput[] | OrderCreateWithoutVendorInput
  >;
  delete?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  connect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  set?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  disconnect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  update?: Maybe<
    | OrderUpdateWithWhereUniqueWithoutVendorInput[]
    | OrderUpdateWithWhereUniqueWithoutVendorInput
  >;
  upsert?: Maybe<
    | OrderUpsertWithWhereUniqueWithoutVendorInput[]
    | OrderUpsertWithWhereUniqueWithoutVendorInput
  >;
  deleteMany?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
  updateMany?: Maybe<
    OrderUpdateManyWithWhereNestedInput[] | OrderUpdateManyWithWhereNestedInput
  >;
}

export interface OrderUpdateWithWhereUniqueWithoutVendorInput {
  where: OrderWhereUniqueInput;
  data: OrderUpdateWithoutVendorDataInput;
}

export interface OrderUpdateWithoutVendorDataInput {
  order_bags?: Maybe<OrderBagUpdateManyWithoutOrderInput>;
  total?: Maybe<Int>;
  customer?: Maybe<UserUpdateOneRequiredWithoutOrdersInput>;
  order_date?: Maybe<DateTimeInput>;
  delivery_address?: Maybe<String>;
  shipper?: Maybe<String>;
  payment_details?: Maybe<String>;
  status?: Maybe<OrderStatus>;
}

export interface OrderBagUpdateManyWithoutOrderInput {
  create?: Maybe<
    OrderBagCreateWithoutOrderInput[] | OrderBagCreateWithoutOrderInput
  >;
  delete?: Maybe<OrderBagWhereUniqueInput[] | OrderBagWhereUniqueInput>;
  connect?: Maybe<OrderBagWhereUniqueInput[] | OrderBagWhereUniqueInput>;
  set?: Maybe<OrderBagWhereUniqueInput[] | OrderBagWhereUniqueInput>;
  disconnect?: Maybe<OrderBagWhereUniqueInput[] | OrderBagWhereUniqueInput>;
  update?: Maybe<
    | OrderBagUpdateWithWhereUniqueWithoutOrderInput[]
    | OrderBagUpdateWithWhereUniqueWithoutOrderInput
  >;
  upsert?: Maybe<
    | OrderBagUpsertWithWhereUniqueWithoutOrderInput[]
    | OrderBagUpsertWithWhereUniqueWithoutOrderInput
  >;
  deleteMany?: Maybe<OrderBagScalarWhereInput[] | OrderBagScalarWhereInput>;
  updateMany?: Maybe<
    | OrderBagUpdateManyWithWhereNestedInput[]
    | OrderBagUpdateManyWithWhereNestedInput
  >;
}

export interface OrderBagUpdateWithWhereUniqueWithoutOrderInput {
  where: OrderBagWhereUniqueInput;
  data: OrderBagUpdateWithoutOrderDataInput;
}

export interface OrderBagUpdateWithoutOrderDataInput {
  type?: Maybe<ItemType>;
  status?: Maybe<OrderStatus>;
  items?: Maybe<OrderedItemUpdateManyWithoutOrder_bagInput>;
  delivery_date?: Maybe<DateTimeInput>;
}

export interface OrderedItemUpdateManyWithoutOrder_bagInput {
  create?: Maybe<
    | OrderedItemCreateWithoutOrder_bagInput[]
    | OrderedItemCreateWithoutOrder_bagInput
  >;
  delete?: Maybe<OrderedItemWhereUniqueInput[] | OrderedItemWhereUniqueInput>;
  connect?: Maybe<OrderedItemWhereUniqueInput[] | OrderedItemWhereUniqueInput>;
  set?: Maybe<OrderedItemWhereUniqueInput[] | OrderedItemWhereUniqueInput>;
  disconnect?: Maybe<
    OrderedItemWhereUniqueInput[] | OrderedItemWhereUniqueInput
  >;
  update?: Maybe<
    | OrderedItemUpdateWithWhereUniqueWithoutOrder_bagInput[]
    | OrderedItemUpdateWithWhereUniqueWithoutOrder_bagInput
  >;
  upsert?: Maybe<
    | OrderedItemUpsertWithWhereUniqueWithoutOrder_bagInput[]
    | OrderedItemUpsertWithWhereUniqueWithoutOrder_bagInput
  >;
  deleteMany?: Maybe<
    OrderedItemScalarWhereInput[] | OrderedItemScalarWhereInput
  >;
  updateMany?: Maybe<
    | OrderedItemUpdateManyWithWhereNestedInput[]
    | OrderedItemUpdateManyWithWhereNestedInput
  >;
}

export interface OrderedItemUpdateWithWhereUniqueWithoutOrder_bagInput {
  where: OrderedItemWhereUniqueInput;
  data: OrderedItemUpdateWithoutOrder_bagDataInput;
}

export interface OrderedItemUpdateWithoutOrder_bagDataInput {
  item?: Maybe<ItemUpdateOneRequiredInput>;
  type?: Maybe<ItemType>;
  quantity?: Maybe<Int>;
  delivery_date?: Maybe<DateTimeInput>;
  status?: Maybe<OrderStatus>;
}

export interface ItemUpdateOneRequiredInput {
  create?: Maybe<ItemCreateInput>;
  update?: Maybe<ItemUpdateDataInput>;
  upsert?: Maybe<ItemUpsertNestedInput>;
  connect?: Maybe<ItemWhereUniqueInput>;
}

export interface ItemUpdateDataInput {
  name?: Maybe<String>;
  category?: Maybe<String>;
  type?: Maybe<ItemType>;
  url?: Maybe<String>;
  description?: Maybe<String>;
  price?: Maybe<Int>;
  is_available?: Maybe<Boolean>;
  rating?: Maybe<Int>;
  vendor?: Maybe<VendorUpdateOneRequiredWithoutItemsInput>;
}

export interface ItemUpsertNestedInput {
  update: ItemUpdateDataInput;
  create: ItemCreateInput;
}

export interface OrderedItemUpsertWithWhereUniqueWithoutOrder_bagInput {
  where: OrderedItemWhereUniqueInput;
  update: OrderedItemUpdateWithoutOrder_bagDataInput;
  create: OrderedItemCreateWithoutOrder_bagInput;
}

export interface OrderedItemScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<ItemType>;
  type_not?: Maybe<ItemType>;
  type_in?: Maybe<ItemType[] | ItemType>;
  type_not_in?: Maybe<ItemType[] | ItemType>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  delivery_date?: Maybe<DateTimeInput>;
  delivery_date_not?: Maybe<DateTimeInput>;
  delivery_date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  delivery_date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  delivery_date_lt?: Maybe<DateTimeInput>;
  delivery_date_lte?: Maybe<DateTimeInput>;
  delivery_date_gt?: Maybe<DateTimeInput>;
  delivery_date_gte?: Maybe<DateTimeInput>;
  status?: Maybe<OrderStatus>;
  status_not?: Maybe<OrderStatus>;
  status_in?: Maybe<OrderStatus[] | OrderStatus>;
  status_not_in?: Maybe<OrderStatus[] | OrderStatus>;
  AND?: Maybe<OrderedItemScalarWhereInput[] | OrderedItemScalarWhereInput>;
  OR?: Maybe<OrderedItemScalarWhereInput[] | OrderedItemScalarWhereInput>;
  NOT?: Maybe<OrderedItemScalarWhereInput[] | OrderedItemScalarWhereInput>;
}

export interface OrderedItemUpdateManyWithWhereNestedInput {
  where: OrderedItemScalarWhereInput;
  data: OrderedItemUpdateManyDataInput;
}

export interface OrderedItemUpdateManyDataInput {
  type?: Maybe<ItemType>;
  quantity?: Maybe<Int>;
  delivery_date?: Maybe<DateTimeInput>;
  status?: Maybe<OrderStatus>;
}

export interface OrderBagUpsertWithWhereUniqueWithoutOrderInput {
  where: OrderBagWhereUniqueInput;
  update: OrderBagUpdateWithoutOrderDataInput;
  create: OrderBagCreateWithoutOrderInput;
}

export interface OrderBagScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<ItemType>;
  type_not?: Maybe<ItemType>;
  type_in?: Maybe<ItemType[] | ItemType>;
  type_not_in?: Maybe<ItemType[] | ItemType>;
  status?: Maybe<OrderStatus>;
  status_not?: Maybe<OrderStatus>;
  status_in?: Maybe<OrderStatus[] | OrderStatus>;
  status_not_in?: Maybe<OrderStatus[] | OrderStatus>;
  delivery_date?: Maybe<DateTimeInput>;
  delivery_date_not?: Maybe<DateTimeInput>;
  delivery_date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  delivery_date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  delivery_date_lt?: Maybe<DateTimeInput>;
  delivery_date_lte?: Maybe<DateTimeInput>;
  delivery_date_gt?: Maybe<DateTimeInput>;
  delivery_date_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<OrderBagScalarWhereInput[] | OrderBagScalarWhereInput>;
  OR?: Maybe<OrderBagScalarWhereInput[] | OrderBagScalarWhereInput>;
  NOT?: Maybe<OrderBagScalarWhereInput[] | OrderBagScalarWhereInput>;
}

export interface OrderBagUpdateManyWithWhereNestedInput {
  where: OrderBagScalarWhereInput;
  data: OrderBagUpdateManyDataInput;
}

export interface OrderBagUpdateManyDataInput {
  type?: Maybe<ItemType>;
  status?: Maybe<OrderStatus>;
  delivery_date?: Maybe<DateTimeInput>;
}

export interface UserUpdateOneRequiredWithoutOrdersInput {
  create?: Maybe<UserCreateWithoutOrdersInput>;
  update?: Maybe<UserUpdateWithoutOrdersDataInput>;
  upsert?: Maybe<UserUpsertWithoutOrdersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutOrdersDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  address?: Maybe<String>;
  phone?: Maybe<Int>;
}

export interface UserUpsertWithoutOrdersInput {
  update: UserUpdateWithoutOrdersDataInput;
  create: UserCreateWithoutOrdersInput;
}

export interface OrderUpsertWithWhereUniqueWithoutVendorInput {
  where: OrderWhereUniqueInput;
  update: OrderUpdateWithoutVendorDataInput;
  create: OrderCreateWithoutVendorInput;
}

export interface OrderScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  total?: Maybe<Int>;
  total_not?: Maybe<Int>;
  total_in?: Maybe<Int[] | Int>;
  total_not_in?: Maybe<Int[] | Int>;
  total_lt?: Maybe<Int>;
  total_lte?: Maybe<Int>;
  total_gt?: Maybe<Int>;
  total_gte?: Maybe<Int>;
  order_date?: Maybe<DateTimeInput>;
  order_date_not?: Maybe<DateTimeInput>;
  order_date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  order_date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  order_date_lt?: Maybe<DateTimeInput>;
  order_date_lte?: Maybe<DateTimeInput>;
  order_date_gt?: Maybe<DateTimeInput>;
  order_date_gte?: Maybe<DateTimeInput>;
  delivery_address?: Maybe<String>;
  delivery_address_not?: Maybe<String>;
  delivery_address_in?: Maybe<String[] | String>;
  delivery_address_not_in?: Maybe<String[] | String>;
  delivery_address_lt?: Maybe<String>;
  delivery_address_lte?: Maybe<String>;
  delivery_address_gt?: Maybe<String>;
  delivery_address_gte?: Maybe<String>;
  delivery_address_contains?: Maybe<String>;
  delivery_address_not_contains?: Maybe<String>;
  delivery_address_starts_with?: Maybe<String>;
  delivery_address_not_starts_with?: Maybe<String>;
  delivery_address_ends_with?: Maybe<String>;
  delivery_address_not_ends_with?: Maybe<String>;
  shipper?: Maybe<String>;
  shipper_not?: Maybe<String>;
  shipper_in?: Maybe<String[] | String>;
  shipper_not_in?: Maybe<String[] | String>;
  shipper_lt?: Maybe<String>;
  shipper_lte?: Maybe<String>;
  shipper_gt?: Maybe<String>;
  shipper_gte?: Maybe<String>;
  shipper_contains?: Maybe<String>;
  shipper_not_contains?: Maybe<String>;
  shipper_starts_with?: Maybe<String>;
  shipper_not_starts_with?: Maybe<String>;
  shipper_ends_with?: Maybe<String>;
  shipper_not_ends_with?: Maybe<String>;
  payment_details?: Maybe<String>;
  payment_details_not?: Maybe<String>;
  payment_details_in?: Maybe<String[] | String>;
  payment_details_not_in?: Maybe<String[] | String>;
  payment_details_lt?: Maybe<String>;
  payment_details_lte?: Maybe<String>;
  payment_details_gt?: Maybe<String>;
  payment_details_gte?: Maybe<String>;
  payment_details_contains?: Maybe<String>;
  payment_details_not_contains?: Maybe<String>;
  payment_details_starts_with?: Maybe<String>;
  payment_details_not_starts_with?: Maybe<String>;
  payment_details_ends_with?: Maybe<String>;
  payment_details_not_ends_with?: Maybe<String>;
  status?: Maybe<OrderStatus>;
  status_not?: Maybe<OrderStatus>;
  status_in?: Maybe<OrderStatus[] | OrderStatus>;
  status_not_in?: Maybe<OrderStatus[] | OrderStatus>;
  AND?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
  OR?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
  NOT?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
}

export interface OrderUpdateManyWithWhereNestedInput {
  where: OrderScalarWhereInput;
  data: OrderUpdateManyDataInput;
}

export interface OrderUpdateManyDataInput {
  total?: Maybe<Int>;
  order_date?: Maybe<DateTimeInput>;
  delivery_address?: Maybe<String>;
  shipper?: Maybe<String>;
  payment_details?: Maybe<String>;
  status?: Maybe<OrderStatus>;
}

export interface VendorUpsertWithoutItemsInput {
  update: VendorUpdateWithoutItemsDataInput;
  create: VendorCreateWithoutItemsInput;
}

export interface ItemUpdateManyMutationInput {
  name?: Maybe<String>;
  category?: Maybe<String>;
  type?: Maybe<ItemType>;
  url?: Maybe<String>;
  description?: Maybe<String>;
  price?: Maybe<Int>;
  is_available?: Maybe<Boolean>;
  rating?: Maybe<Int>;
}

export interface OrderCreateInput {
  id?: Maybe<ID_Input>;
  order_bags?: Maybe<OrderBagCreateManyWithoutOrderInput>;
  total: Int;
  customer: UserCreateOneWithoutOrdersInput;
  vendor: VendorCreateOneWithoutOrdersInput;
  order_date: DateTimeInput;
  delivery_address: String;
  shipper?: Maybe<String>;
  payment_details?: Maybe<String>;
  status?: Maybe<OrderStatus>;
}

export interface VendorCreateOneWithoutOrdersInput {
  create?: Maybe<VendorCreateWithoutOrdersInput>;
  connect?: Maybe<VendorWhereUniqueInput>;
}

export interface VendorCreateWithoutOrdersInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  address?: Maybe<String>;
  phone?: Maybe<Int>;
  payment_details?: Maybe<String>;
  rating?: Maybe<Int>;
  items?: Maybe<ItemCreateManyWithoutVendorInput>;
}

export interface ItemCreateManyWithoutVendorInput {
  create?: Maybe<ItemCreateWithoutVendorInput[] | ItemCreateWithoutVendorInput>;
  connect?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
}

export interface ItemCreateWithoutVendorInput {
  id?: Maybe<ID_Input>;
  name: String;
  category: String;
  type: ItemType;
  url?: Maybe<String>;
  description: String;
  price: Int;
  is_available: Boolean;
  rating?: Maybe<Int>;
}

export interface OrderUpdateInput {
  order_bags?: Maybe<OrderBagUpdateManyWithoutOrderInput>;
  total?: Maybe<Int>;
  customer?: Maybe<UserUpdateOneRequiredWithoutOrdersInput>;
  vendor?: Maybe<VendorUpdateOneRequiredWithoutOrdersInput>;
  order_date?: Maybe<DateTimeInput>;
  delivery_address?: Maybe<String>;
  shipper?: Maybe<String>;
  payment_details?: Maybe<String>;
  status?: Maybe<OrderStatus>;
}

export interface VendorUpdateOneRequiredWithoutOrdersInput {
  create?: Maybe<VendorCreateWithoutOrdersInput>;
  update?: Maybe<VendorUpdateWithoutOrdersDataInput>;
  upsert?: Maybe<VendorUpsertWithoutOrdersInput>;
  connect?: Maybe<VendorWhereUniqueInput>;
}

export interface VendorUpdateWithoutOrdersDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  address?: Maybe<String>;
  phone?: Maybe<Int>;
  payment_details?: Maybe<String>;
  rating?: Maybe<Int>;
  items?: Maybe<ItemUpdateManyWithoutVendorInput>;
}

export interface ItemUpdateManyWithoutVendorInput {
  create?: Maybe<ItemCreateWithoutVendorInput[] | ItemCreateWithoutVendorInput>;
  delete?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  connect?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  set?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  disconnect?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  update?: Maybe<
    | ItemUpdateWithWhereUniqueWithoutVendorInput[]
    | ItemUpdateWithWhereUniqueWithoutVendorInput
  >;
  upsert?: Maybe<
    | ItemUpsertWithWhereUniqueWithoutVendorInput[]
    | ItemUpsertWithWhereUniqueWithoutVendorInput
  >;
  deleteMany?: Maybe<ItemScalarWhereInput[] | ItemScalarWhereInput>;
  updateMany?: Maybe<
    ItemUpdateManyWithWhereNestedInput[] | ItemUpdateManyWithWhereNestedInput
  >;
}

export interface ItemUpdateWithWhereUniqueWithoutVendorInput {
  where: ItemWhereUniqueInput;
  data: ItemUpdateWithoutVendorDataInput;
}

export interface ItemUpdateWithoutVendorDataInput {
  name?: Maybe<String>;
  category?: Maybe<String>;
  type?: Maybe<ItemType>;
  url?: Maybe<String>;
  description?: Maybe<String>;
  price?: Maybe<Int>;
  is_available?: Maybe<Boolean>;
  rating?: Maybe<Int>;
}

export interface ItemUpsertWithWhereUniqueWithoutVendorInput {
  where: ItemWhereUniqueInput;
  update: ItemUpdateWithoutVendorDataInput;
  create: ItemCreateWithoutVendorInput;
}

export interface ItemScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  category?: Maybe<String>;
  category_not?: Maybe<String>;
  category_in?: Maybe<String[] | String>;
  category_not_in?: Maybe<String[] | String>;
  category_lt?: Maybe<String>;
  category_lte?: Maybe<String>;
  category_gt?: Maybe<String>;
  category_gte?: Maybe<String>;
  category_contains?: Maybe<String>;
  category_not_contains?: Maybe<String>;
  category_starts_with?: Maybe<String>;
  category_not_starts_with?: Maybe<String>;
  category_ends_with?: Maybe<String>;
  category_not_ends_with?: Maybe<String>;
  type?: Maybe<ItemType>;
  type_not?: Maybe<ItemType>;
  type_in?: Maybe<ItemType[] | ItemType>;
  type_not_in?: Maybe<ItemType[] | ItemType>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  is_available?: Maybe<Boolean>;
  is_available_not?: Maybe<Boolean>;
  rating?: Maybe<Int>;
  rating_not?: Maybe<Int>;
  rating_in?: Maybe<Int[] | Int>;
  rating_not_in?: Maybe<Int[] | Int>;
  rating_lt?: Maybe<Int>;
  rating_lte?: Maybe<Int>;
  rating_gt?: Maybe<Int>;
  rating_gte?: Maybe<Int>;
  AND?: Maybe<ItemScalarWhereInput[] | ItemScalarWhereInput>;
  OR?: Maybe<ItemScalarWhereInput[] | ItemScalarWhereInput>;
  NOT?: Maybe<ItemScalarWhereInput[] | ItemScalarWhereInput>;
}

export interface ItemUpdateManyWithWhereNestedInput {
  where: ItemScalarWhereInput;
  data: ItemUpdateManyDataInput;
}

export interface ItemUpdateManyDataInput {
  name?: Maybe<String>;
  category?: Maybe<String>;
  type?: Maybe<ItemType>;
  url?: Maybe<String>;
  description?: Maybe<String>;
  price?: Maybe<Int>;
  is_available?: Maybe<Boolean>;
  rating?: Maybe<Int>;
}

export interface VendorUpsertWithoutOrdersInput {
  update: VendorUpdateWithoutOrdersDataInput;
  create: VendorCreateWithoutOrdersInput;
}

export interface OrderUpdateManyMutationInput {
  total?: Maybe<Int>;
  order_date?: Maybe<DateTimeInput>;
  delivery_address?: Maybe<String>;
  shipper?: Maybe<String>;
  payment_details?: Maybe<String>;
  status?: Maybe<OrderStatus>;
}

export interface OrderBagCreateInput {
  id?: Maybe<ID_Input>;
  type: ItemType;
  order?: Maybe<OrderCreateOneWithoutOrder_bagsInput>;
  status?: Maybe<OrderStatus>;
  items?: Maybe<OrderedItemCreateManyWithoutOrder_bagInput>;
  delivery_date: DateTimeInput;
}

export interface OrderCreateOneWithoutOrder_bagsInput {
  create?: Maybe<OrderCreateWithoutOrder_bagsInput>;
  connect?: Maybe<OrderWhereUniqueInput>;
}

export interface OrderCreateWithoutOrder_bagsInput {
  id?: Maybe<ID_Input>;
  total: Int;
  customer: UserCreateOneWithoutOrdersInput;
  vendor: VendorCreateOneWithoutOrdersInput;
  order_date: DateTimeInput;
  delivery_address: String;
  shipper?: Maybe<String>;
  payment_details?: Maybe<String>;
  status?: Maybe<OrderStatus>;
}

export interface OrderBagUpdateInput {
  type?: Maybe<ItemType>;
  order?: Maybe<OrderUpdateOneWithoutOrder_bagsInput>;
  status?: Maybe<OrderStatus>;
  items?: Maybe<OrderedItemUpdateManyWithoutOrder_bagInput>;
  delivery_date?: Maybe<DateTimeInput>;
}

export interface OrderUpdateOneWithoutOrder_bagsInput {
  create?: Maybe<OrderCreateWithoutOrder_bagsInput>;
  update?: Maybe<OrderUpdateWithoutOrder_bagsDataInput>;
  upsert?: Maybe<OrderUpsertWithoutOrder_bagsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<OrderWhereUniqueInput>;
}

export interface OrderUpdateWithoutOrder_bagsDataInput {
  total?: Maybe<Int>;
  customer?: Maybe<UserUpdateOneRequiredWithoutOrdersInput>;
  vendor?: Maybe<VendorUpdateOneRequiredWithoutOrdersInput>;
  order_date?: Maybe<DateTimeInput>;
  delivery_address?: Maybe<String>;
  shipper?: Maybe<String>;
  payment_details?: Maybe<String>;
  status?: Maybe<OrderStatus>;
}

export interface OrderUpsertWithoutOrder_bagsInput {
  update: OrderUpdateWithoutOrder_bagsDataInput;
  create: OrderCreateWithoutOrder_bagsInput;
}

export interface OrderBagUpdateManyMutationInput {
  type?: Maybe<ItemType>;
  status?: Maybe<OrderStatus>;
  delivery_date?: Maybe<DateTimeInput>;
}

export interface OrderedItemCreateInput {
  id?: Maybe<ID_Input>;
  item: ItemCreateOneInput;
  type: ItemType;
  quantity: Int;
  order_bag?: Maybe<OrderBagCreateOneWithoutItemsInput>;
  delivery_date?: Maybe<DateTimeInput>;
  status?: Maybe<OrderStatus>;
}

export interface OrderBagCreateOneWithoutItemsInput {
  create?: Maybe<OrderBagCreateWithoutItemsInput>;
  connect?: Maybe<OrderBagWhereUniqueInput>;
}

export interface OrderBagCreateWithoutItemsInput {
  id?: Maybe<ID_Input>;
  type: ItemType;
  order?: Maybe<OrderCreateOneWithoutOrder_bagsInput>;
  status?: Maybe<OrderStatus>;
  delivery_date: DateTimeInput;
}

export interface OrderedItemUpdateInput {
  item?: Maybe<ItemUpdateOneRequiredInput>;
  type?: Maybe<ItemType>;
  quantity?: Maybe<Int>;
  order_bag?: Maybe<OrderBagUpdateOneWithoutItemsInput>;
  delivery_date?: Maybe<DateTimeInput>;
  status?: Maybe<OrderStatus>;
}

export interface OrderBagUpdateOneWithoutItemsInput {
  create?: Maybe<OrderBagCreateWithoutItemsInput>;
  update?: Maybe<OrderBagUpdateWithoutItemsDataInput>;
  upsert?: Maybe<OrderBagUpsertWithoutItemsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<OrderBagWhereUniqueInput>;
}

export interface OrderBagUpdateWithoutItemsDataInput {
  type?: Maybe<ItemType>;
  order?: Maybe<OrderUpdateOneWithoutOrder_bagsInput>;
  status?: Maybe<OrderStatus>;
  delivery_date?: Maybe<DateTimeInput>;
}

export interface OrderBagUpsertWithoutItemsInput {
  update: OrderBagUpdateWithoutItemsDataInput;
  create: OrderBagCreateWithoutItemsInput;
}

export interface OrderedItemUpdateManyMutationInput {
  type?: Maybe<ItemType>;
  quantity?: Maybe<Int>;
  delivery_date?: Maybe<DateTimeInput>;
  status?: Maybe<OrderStatus>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  address?: Maybe<String>;
  phone?: Maybe<Int>;
  orders?: Maybe<OrderCreateManyWithoutCustomerInput>;
}

export interface OrderCreateManyWithoutCustomerInput {
  create?: Maybe<
    OrderCreateWithoutCustomerInput[] | OrderCreateWithoutCustomerInput
  >;
  connect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
}

export interface OrderCreateWithoutCustomerInput {
  id?: Maybe<ID_Input>;
  order_bags?: Maybe<OrderBagCreateManyWithoutOrderInput>;
  total: Int;
  vendor: VendorCreateOneWithoutOrdersInput;
  order_date: DateTimeInput;
  delivery_address: String;
  shipper?: Maybe<String>;
  payment_details?: Maybe<String>;
  status?: Maybe<OrderStatus>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  address?: Maybe<String>;
  phone?: Maybe<Int>;
  orders?: Maybe<OrderUpdateManyWithoutCustomerInput>;
}

export interface OrderUpdateManyWithoutCustomerInput {
  create?: Maybe<
    OrderCreateWithoutCustomerInput[] | OrderCreateWithoutCustomerInput
  >;
  delete?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  connect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  set?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  disconnect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  update?: Maybe<
    | OrderUpdateWithWhereUniqueWithoutCustomerInput[]
    | OrderUpdateWithWhereUniqueWithoutCustomerInput
  >;
  upsert?: Maybe<
    | OrderUpsertWithWhereUniqueWithoutCustomerInput[]
    | OrderUpsertWithWhereUniqueWithoutCustomerInput
  >;
  deleteMany?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
  updateMany?: Maybe<
    OrderUpdateManyWithWhereNestedInput[] | OrderUpdateManyWithWhereNestedInput
  >;
}

export interface OrderUpdateWithWhereUniqueWithoutCustomerInput {
  where: OrderWhereUniqueInput;
  data: OrderUpdateWithoutCustomerDataInput;
}

export interface OrderUpdateWithoutCustomerDataInput {
  order_bags?: Maybe<OrderBagUpdateManyWithoutOrderInput>;
  total?: Maybe<Int>;
  vendor?: Maybe<VendorUpdateOneRequiredWithoutOrdersInput>;
  order_date?: Maybe<DateTimeInput>;
  delivery_address?: Maybe<String>;
  shipper?: Maybe<String>;
  payment_details?: Maybe<String>;
  status?: Maybe<OrderStatus>;
}

export interface OrderUpsertWithWhereUniqueWithoutCustomerInput {
  where: OrderWhereUniqueInput;
  update: OrderUpdateWithoutCustomerDataInput;
  create: OrderCreateWithoutCustomerInput;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  address?: Maybe<String>;
  phone?: Maybe<Int>;
}

export interface VendorCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  address?: Maybe<String>;
  phone?: Maybe<Int>;
  payment_details?: Maybe<String>;
  rating?: Maybe<Int>;
  items?: Maybe<ItemCreateManyWithoutVendorInput>;
  orders?: Maybe<OrderCreateManyWithoutVendorInput>;
}

export interface VendorUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  address?: Maybe<String>;
  phone?: Maybe<Int>;
  payment_details?: Maybe<String>;
  rating?: Maybe<Int>;
  items?: Maybe<ItemUpdateManyWithoutVendorInput>;
  orders?: Maybe<OrderUpdateManyWithoutVendorInput>;
}

export interface VendorUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  address?: Maybe<String>;
  phone?: Maybe<Int>;
  payment_details?: Maybe<String>;
  rating?: Maybe<Int>;
}

export interface ItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ItemWhereInput>;
  AND?: Maybe<ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput>;
  OR?: Maybe<ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput>;
  NOT?: Maybe<ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput>;
}

export interface OrderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrderWhereInput>;
  AND?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
  OR?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
  NOT?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
}

export interface OrderBagSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrderBagWhereInput>;
  AND?: Maybe<
    OrderBagSubscriptionWhereInput[] | OrderBagSubscriptionWhereInput
  >;
  OR?: Maybe<OrderBagSubscriptionWhereInput[] | OrderBagSubscriptionWhereInput>;
  NOT?: Maybe<
    OrderBagSubscriptionWhereInput[] | OrderBagSubscriptionWhereInput
  >;
}

export interface OrderedItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrderedItemWhereInput>;
  AND?: Maybe<
    OrderedItemSubscriptionWhereInput[] | OrderedItemSubscriptionWhereInput
  >;
  OR?: Maybe<
    OrderedItemSubscriptionWhereInput[] | OrderedItemSubscriptionWhereInput
  >;
  NOT?: Maybe<
    OrderedItemSubscriptionWhereInput[] | OrderedItemSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface VendorSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<VendorWhereInput>;
  AND?: Maybe<VendorSubscriptionWhereInput[] | VendorSubscriptionWhereInput>;
  OR?: Maybe<VendorSubscriptionWhereInput[] | VendorSubscriptionWhereInput>;
  NOT?: Maybe<VendorSubscriptionWhereInput[] | VendorSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Item {
  id: ID_Output;
  name: String;
  category: String;
  type: ItemType;
  url?: String;
  description: String;
  price: Int;
  is_available: Boolean;
  rating?: Int;
}

export interface ItemPromise extends Promise<Item>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  category: () => Promise<String>;
  type: () => Promise<ItemType>;
  url: () => Promise<String>;
  description: () => Promise<String>;
  price: () => Promise<Int>;
  is_available: () => Promise<Boolean>;
  rating: () => Promise<Int>;
  vendor: <T = VendorPromise>() => T;
}

export interface ItemSubscription
  extends Promise<AsyncIterator<Item>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<ItemType>>;
  url: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  is_available: () => Promise<AsyncIterator<Boolean>>;
  rating: () => Promise<AsyncIterator<Int>>;
  vendor: <T = VendorSubscription>() => T;
}

export interface ItemNullablePromise
  extends Promise<Item | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  category: () => Promise<String>;
  type: () => Promise<ItemType>;
  url: () => Promise<String>;
  description: () => Promise<String>;
  price: () => Promise<Int>;
  is_available: () => Promise<Boolean>;
  rating: () => Promise<Int>;
  vendor: <T = VendorPromise>() => T;
}

export interface Vendor {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  address?: String;
  phone?: Int;
  created_at: DateTimeOutput;
  payment_details?: String;
  rating?: Int;
}

export interface VendorPromise extends Promise<Vendor>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  address: () => Promise<String>;
  phone: () => Promise<Int>;
  created_at: () => Promise<DateTimeOutput>;
  payment_details: () => Promise<String>;
  rating: () => Promise<Int>;
  items: <T = FragmentableArray<Item>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  orders: <T = FragmentableArray<Order>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface VendorSubscription
  extends Promise<AsyncIterator<Vendor>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<Int>>;
  created_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  payment_details: () => Promise<AsyncIterator<String>>;
  rating: () => Promise<AsyncIterator<Int>>;
  items: <T = Promise<AsyncIterator<ItemSubscription>>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  orders: <T = Promise<AsyncIterator<OrderSubscription>>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface VendorNullablePromise
  extends Promise<Vendor | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  address: () => Promise<String>;
  phone: () => Promise<Int>;
  created_at: () => Promise<DateTimeOutput>;
  payment_details: () => Promise<String>;
  rating: () => Promise<Int>;
  items: <T = FragmentableArray<Item>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  orders: <T = FragmentableArray<Order>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Order {
  id: ID_Output;
  total: Int;
  order_date: DateTimeOutput;
  delivery_address: String;
  shipper?: String;
  payment_details?: String;
  status?: OrderStatus;
}

export interface OrderPromise extends Promise<Order>, Fragmentable {
  id: () => Promise<ID_Output>;
  order_bags: <T = FragmentableArray<OrderBag>>(args?: {
    where?: OrderBagWhereInput;
    orderBy?: OrderBagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  total: () => Promise<Int>;
  customer: <T = UserPromise>() => T;
  vendor: <T = VendorPromise>() => T;
  order_date: () => Promise<DateTimeOutput>;
  delivery_address: () => Promise<String>;
  shipper: () => Promise<String>;
  payment_details: () => Promise<String>;
  status: () => Promise<OrderStatus>;
}

export interface OrderSubscription
  extends Promise<AsyncIterator<Order>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  order_bags: <T = Promise<AsyncIterator<OrderBagSubscription>>>(args?: {
    where?: OrderBagWhereInput;
    orderBy?: OrderBagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  total: () => Promise<AsyncIterator<Int>>;
  customer: <T = UserSubscription>() => T;
  vendor: <T = VendorSubscription>() => T;
  order_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  delivery_address: () => Promise<AsyncIterator<String>>;
  shipper: () => Promise<AsyncIterator<String>>;
  payment_details: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<OrderStatus>>;
}

export interface OrderNullablePromise
  extends Promise<Order | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  order_bags: <T = FragmentableArray<OrderBag>>(args?: {
    where?: OrderBagWhereInput;
    orderBy?: OrderBagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  total: () => Promise<Int>;
  customer: <T = UserPromise>() => T;
  vendor: <T = VendorPromise>() => T;
  order_date: () => Promise<DateTimeOutput>;
  delivery_address: () => Promise<String>;
  shipper: () => Promise<String>;
  payment_details: () => Promise<String>;
  status: () => Promise<OrderStatus>;
}

export interface OrderBag {
  id: ID_Output;
  type: ItemType;
  status: OrderStatus;
  delivery_date: DateTimeOutput;
}

export interface OrderBagPromise extends Promise<OrderBag>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<ItemType>;
  order: <T = OrderPromise>() => T;
  status: () => Promise<OrderStatus>;
  items: <T = FragmentableArray<OrderedItem>>(args?: {
    where?: OrderedItemWhereInput;
    orderBy?: OrderedItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  delivery_date: () => Promise<DateTimeOutput>;
}

export interface OrderBagSubscription
  extends Promise<AsyncIterator<OrderBag>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<ItemType>>;
  order: <T = OrderSubscription>() => T;
  status: () => Promise<AsyncIterator<OrderStatus>>;
  items: <T = Promise<AsyncIterator<OrderedItemSubscription>>>(args?: {
    where?: OrderedItemWhereInput;
    orderBy?: OrderedItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  delivery_date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OrderBagNullablePromise
  extends Promise<OrderBag | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<ItemType>;
  order: <T = OrderPromise>() => T;
  status: () => Promise<OrderStatus>;
  items: <T = FragmentableArray<OrderedItem>>(args?: {
    where?: OrderedItemWhereInput;
    orderBy?: OrderedItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  delivery_date: () => Promise<DateTimeOutput>;
}

export interface OrderedItem {
  id: ID_Output;
  type: ItemType;
  quantity: Int;
  delivery_date?: DateTimeOutput;
  status?: OrderStatus;
}

export interface OrderedItemPromise extends Promise<OrderedItem>, Fragmentable {
  id: () => Promise<ID_Output>;
  item: <T = ItemPromise>() => T;
  type: () => Promise<ItemType>;
  quantity: () => Promise<Int>;
  order_bag: <T = OrderBagPromise>() => T;
  delivery_date: () => Promise<DateTimeOutput>;
  status: () => Promise<OrderStatus>;
}

export interface OrderedItemSubscription
  extends Promise<AsyncIterator<OrderedItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  item: <T = ItemSubscription>() => T;
  type: () => Promise<AsyncIterator<ItemType>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  order_bag: <T = OrderBagSubscription>() => T;
  delivery_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<OrderStatus>>;
}

export interface OrderedItemNullablePromise
  extends Promise<OrderedItem | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  item: <T = ItemPromise>() => T;
  type: () => Promise<ItemType>;
  quantity: () => Promise<Int>;
  order_bag: <T = OrderBagPromise>() => T;
  delivery_date: () => Promise<DateTimeOutput>;
  status: () => Promise<OrderStatus>;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  address?: String;
  phone?: Int;
  created_at: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  address: () => Promise<String>;
  phone: () => Promise<Int>;
  created_at: () => Promise<DateTimeOutput>;
  orders: <T = FragmentableArray<Order>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<Int>>;
  created_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  orders: <T = Promise<AsyncIterator<OrderSubscription>>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  address: () => Promise<String>;
  phone: () => Promise<Int>;
  created_at: () => Promise<DateTimeOutput>;
  orders: <T = FragmentableArray<Order>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ItemConnection {
  pageInfo: PageInfo;
  edges: ItemEdge[];
}

export interface ItemConnectionPromise
  extends Promise<ItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ItemEdge>>() => T;
  aggregate: <T = AggregateItemPromise>() => T;
}

export interface ItemConnectionSubscription
  extends Promise<AsyncIterator<ItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateItemSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ItemEdge {
  node: Item;
  cursor: String;
}

export interface ItemEdgePromise extends Promise<ItemEdge>, Fragmentable {
  node: <T = ItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ItemEdgeSubscription
  extends Promise<AsyncIterator<ItemEdge>>,
    Fragmentable {
  node: <T = ItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateItem {
  count: Int;
}

export interface AggregateItemPromise
  extends Promise<AggregateItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateItemSubscription
  extends Promise<AsyncIterator<AggregateItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrderConnection {
  pageInfo: PageInfo;
  edges: OrderEdge[];
}

export interface OrderConnectionPromise
  extends Promise<OrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderEdge>>() => T;
  aggregate: <T = AggregateOrderPromise>() => T;
}

export interface OrderConnectionSubscription
  extends Promise<AsyncIterator<OrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderSubscription>() => T;
}

export interface OrderEdge {
  node: Order;
  cursor: String;
}

export interface OrderEdgePromise extends Promise<OrderEdge>, Fragmentable {
  node: <T = OrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderEdgeSubscription
  extends Promise<AsyncIterator<OrderEdge>>,
    Fragmentable {
  node: <T = OrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrder {
  count: Int;
}

export interface AggregateOrderPromise
  extends Promise<AggregateOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderSubscription
  extends Promise<AsyncIterator<AggregateOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrderBagConnection {
  pageInfo: PageInfo;
  edges: OrderBagEdge[];
}

export interface OrderBagConnectionPromise
  extends Promise<OrderBagConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderBagEdge>>() => T;
  aggregate: <T = AggregateOrderBagPromise>() => T;
}

export interface OrderBagConnectionSubscription
  extends Promise<AsyncIterator<OrderBagConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderBagEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderBagSubscription>() => T;
}

export interface OrderBagEdge {
  node: OrderBag;
  cursor: String;
}

export interface OrderBagEdgePromise
  extends Promise<OrderBagEdge>,
    Fragmentable {
  node: <T = OrderBagPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderBagEdgeSubscription
  extends Promise<AsyncIterator<OrderBagEdge>>,
    Fragmentable {
  node: <T = OrderBagSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrderBag {
  count: Int;
}

export interface AggregateOrderBagPromise
  extends Promise<AggregateOrderBag>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderBagSubscription
  extends Promise<AsyncIterator<AggregateOrderBag>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrderedItemConnection {
  pageInfo: PageInfo;
  edges: OrderedItemEdge[];
}

export interface OrderedItemConnectionPromise
  extends Promise<OrderedItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderedItemEdge>>() => T;
  aggregate: <T = AggregateOrderedItemPromise>() => T;
}

export interface OrderedItemConnectionSubscription
  extends Promise<AsyncIterator<OrderedItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderedItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderedItemSubscription>() => T;
}

export interface OrderedItemEdge {
  node: OrderedItem;
  cursor: String;
}

export interface OrderedItemEdgePromise
  extends Promise<OrderedItemEdge>,
    Fragmentable {
  node: <T = OrderedItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderedItemEdgeSubscription
  extends Promise<AsyncIterator<OrderedItemEdge>>,
    Fragmentable {
  node: <T = OrderedItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrderedItem {
  count: Int;
}

export interface AggregateOrderedItemPromise
  extends Promise<AggregateOrderedItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderedItemSubscription
  extends Promise<AsyncIterator<AggregateOrderedItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VendorConnection {
  pageInfo: PageInfo;
  edges: VendorEdge[];
}

export interface VendorConnectionPromise
  extends Promise<VendorConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VendorEdge>>() => T;
  aggregate: <T = AggregateVendorPromise>() => T;
}

export interface VendorConnectionSubscription
  extends Promise<AsyncIterator<VendorConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VendorEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVendorSubscription>() => T;
}

export interface VendorEdge {
  node: Vendor;
  cursor: String;
}

export interface VendorEdgePromise extends Promise<VendorEdge>, Fragmentable {
  node: <T = VendorPromise>() => T;
  cursor: () => Promise<String>;
}

export interface VendorEdgeSubscription
  extends Promise<AsyncIterator<VendorEdge>>,
    Fragmentable {
  node: <T = VendorSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVendor {
  count: Int;
}

export interface AggregateVendorPromise
  extends Promise<AggregateVendor>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVendorSubscription
  extends Promise<AsyncIterator<AggregateVendor>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ItemSubscriptionPayload {
  mutation: MutationType;
  node: Item;
  updatedFields: String[];
  previousValues: ItemPreviousValues;
}

export interface ItemSubscriptionPayloadPromise
  extends Promise<ItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ItemPreviousValuesPromise>() => T;
}

export interface ItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ItemPreviousValuesSubscription>() => T;
}

export interface ItemPreviousValues {
  id: ID_Output;
  name: String;
  category: String;
  type: ItemType;
  url?: String;
  description: String;
  price: Int;
  is_available: Boolean;
  rating?: Int;
}

export interface ItemPreviousValuesPromise
  extends Promise<ItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  category: () => Promise<String>;
  type: () => Promise<ItemType>;
  url: () => Promise<String>;
  description: () => Promise<String>;
  price: () => Promise<Int>;
  is_available: () => Promise<Boolean>;
  rating: () => Promise<Int>;
}

export interface ItemPreviousValuesSubscription
  extends Promise<AsyncIterator<ItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<ItemType>>;
  url: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  is_available: () => Promise<AsyncIterator<Boolean>>;
  rating: () => Promise<AsyncIterator<Int>>;
}

export interface OrderSubscriptionPayload {
  mutation: MutationType;
  node: Order;
  updatedFields: String[];
  previousValues: OrderPreviousValues;
}

export interface OrderSubscriptionPayloadPromise
  extends Promise<OrderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderPreviousValuesPromise>() => T;
}

export interface OrderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderPreviousValuesSubscription>() => T;
}

export interface OrderPreviousValues {
  id: ID_Output;
  total: Int;
  order_date: DateTimeOutput;
  delivery_address: String;
  shipper?: String;
  payment_details?: String;
  status?: OrderStatus;
}

export interface OrderPreviousValuesPromise
  extends Promise<OrderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  total: () => Promise<Int>;
  order_date: () => Promise<DateTimeOutput>;
  delivery_address: () => Promise<String>;
  shipper: () => Promise<String>;
  payment_details: () => Promise<String>;
  status: () => Promise<OrderStatus>;
}

export interface OrderPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  total: () => Promise<AsyncIterator<Int>>;
  order_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  delivery_address: () => Promise<AsyncIterator<String>>;
  shipper: () => Promise<AsyncIterator<String>>;
  payment_details: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<OrderStatus>>;
}

export interface OrderBagSubscriptionPayload {
  mutation: MutationType;
  node: OrderBag;
  updatedFields: String[];
  previousValues: OrderBagPreviousValues;
}

export interface OrderBagSubscriptionPayloadPromise
  extends Promise<OrderBagSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderBagPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderBagPreviousValuesPromise>() => T;
}

export interface OrderBagSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderBagSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderBagSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderBagPreviousValuesSubscription>() => T;
}

export interface OrderBagPreviousValues {
  id: ID_Output;
  type: ItemType;
  status: OrderStatus;
  delivery_date: DateTimeOutput;
}

export interface OrderBagPreviousValuesPromise
  extends Promise<OrderBagPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<ItemType>;
  status: () => Promise<OrderStatus>;
  delivery_date: () => Promise<DateTimeOutput>;
}

export interface OrderBagPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderBagPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<ItemType>>;
  status: () => Promise<AsyncIterator<OrderStatus>>;
  delivery_date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OrderedItemSubscriptionPayload {
  mutation: MutationType;
  node: OrderedItem;
  updatedFields: String[];
  previousValues: OrderedItemPreviousValues;
}

export interface OrderedItemSubscriptionPayloadPromise
  extends Promise<OrderedItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderedItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderedItemPreviousValuesPromise>() => T;
}

export interface OrderedItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderedItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderedItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderedItemPreviousValuesSubscription>() => T;
}

export interface OrderedItemPreviousValues {
  id: ID_Output;
  type: ItemType;
  quantity: Int;
  delivery_date?: DateTimeOutput;
  status?: OrderStatus;
}

export interface OrderedItemPreviousValuesPromise
  extends Promise<OrderedItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<ItemType>;
  quantity: () => Promise<Int>;
  delivery_date: () => Promise<DateTimeOutput>;
  status: () => Promise<OrderStatus>;
}

export interface OrderedItemPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderedItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<ItemType>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  delivery_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<OrderStatus>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  address?: String;
  phone?: Int;
  created_at: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  address: () => Promise<String>;
  phone: () => Promise<Int>;
  created_at: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<Int>>;
  created_at: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface VendorSubscriptionPayload {
  mutation: MutationType;
  node: Vendor;
  updatedFields: String[];
  previousValues: VendorPreviousValues;
}

export interface VendorSubscriptionPayloadPromise
  extends Promise<VendorSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VendorPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VendorPreviousValuesPromise>() => T;
}

export interface VendorSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VendorSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VendorSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VendorPreviousValuesSubscription>() => T;
}

export interface VendorPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  address?: String;
  phone?: Int;
  created_at: DateTimeOutput;
  payment_details?: String;
  rating?: Int;
}

export interface VendorPreviousValuesPromise
  extends Promise<VendorPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  address: () => Promise<String>;
  phone: () => Promise<Int>;
  created_at: () => Promise<DateTimeOutput>;
  payment_details: () => Promise<String>;
  rating: () => Promise<Int>;
}

export interface VendorPreviousValuesSubscription
  extends Promise<AsyncIterator<VendorPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<Int>>;
  created_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  payment_details: () => Promise<AsyncIterator<String>>;
  rating: () => Promise<AsyncIterator<Int>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Vendor",
    embedded: false
  },
  {
    name: "Item",
    embedded: false
  },
  {
    name: "OrderBag",
    embedded: false
  },
  {
    name: "OrderedItem",
    embedded: false
  },
  {
    name: "Order",
    embedded: false
  },
  {
    name: "ItemType",
    embedded: false
  },
  {
    name: "OrderStatus",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
